version: '3'

services:
  postgres:
    image: postgres:latest  # Using the latest PostgreSQL version
    environment:
      POSTGRES_USER: claim_user
      POSTGRES_PASSWORD: claim_password
      POSTGRES_DB: claim_db
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - e-claim-network
  
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres
      DB_DATABASE: keycloak_db
      DB_USER: claim_user
      DB_PASSWORD: claim_password
    command: ["start-dev"]                # Start Keycloak in development mode
    ports:
      - "8080:8080"                       # Keycloak admin console
    depends_on:
      - postgres
    networks:
      - e-claim-network   # Add the custom network
    volumes:
      - keycloak-data:/opt/keycloak/data
  # keycloak:
  # image: quay.io/keycloak/keycloak:latest
  # environment:
  #   KEYCLOAK_ADMIN: admin
  #   KEYCLOAK_ADMIN_PASSWORD: admin
  #   DB_VENDOR: POSTGRES
  #   DB_ADDR: postgres
  #   DB_DATABASE: keycloak_db
  #   DB_USER: claim_user
  #   DB_PASSWORD: claim_password
  # command:
  #   - start-dev
  #   - --import-realm   # Import realms during the first run
  # ports:
  #   - "8080:8080"
  # depends_on:
  #   - postgres
  # networks:
  #   - e-claim-network
  # volumes:
  #   - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json  # Updated path to the file
  #   - keycloak-data:/opt/keycloak/data  # Persistent runtime data


  claim-service:
    build: 
      context: ./services
      dockerfile: ClaimService/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: "Development"
      ConnectionStrings__ClaimDbConnection: "Host=postgres;Port=5432;Database=claim_db;Username=claim_user;Password=claim_password"
    ports:
      - "5016:8080"
    depends_on:
      - postgres
      - rabbitmq
    networks:
      - e-claim-network

  kong:    
    image: kong:latest    
    environment:
      KONG_DATABASE: "off"                                # Disable the use of a database
      KONG_DECLARATIVE_CONFIG: "/usr/local/kong/kong.yml"  # Path to the declarative configuration file      
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001 # Kong Admin API (optional)
      KONG_LOG_LEVEL: debug   
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    volumes:
      - ./kong/kong.yml:/usr/local/kong/kong.yml
    networks:
      - e-claim-network   # Add the custom network 

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.15.3
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - xpack.security.transport.ssl.enabled=false  # Disable SSL for transport
      - xpack.security.http.ssl.enabled=false  # Keep HTTP without SSL for simplicity
      - action.auto_create_index=true
      - ES_JAVA_OPTS=-Xms2g -Xmx2g
    ports:
      - "9200:9200"  # Elasticsearch HTTP API
    volumes:
      - es-data:/usr/share/elasticsearch/data  # Persistent data
    networks:
      - e-claim-network



  kibana:
    image: docker.elastic.co/kibana/kibana:8.15.3 # Latest stable Kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system  # Username set for Kibana
      - ELASTICSEARCH_PASSWORD=admin@123
    ports:
      - "5601:5601"  # Kibana web interface
    depends_on:
      - elasticsearch
    networks:
      - e-claim-network

  logstash:
    build:
      context: ./logstash  # Path where Dockerfile resides
    ports:
      - "5044:5044"  # Logstash Beats input port
    environment:
      LS_JAVA_OPTS: "-Xmx1g -Xms1g"
    depends_on:
     - elasticsearch
    networks:
    - e-claim-network

  # RabbitMQ with management UI
  rabbitmq:
    image: rabbitmq:3-management  # RabbitMQ with management UI
    ports:
      - "5672:5672"  # RabbitMQ main port
      - "15672:15672"  # RabbitMQ management console
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 30s
      retries: 5
    networks:
      - e-claim-network
  
  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - mongo-data:/data/db
    networks:
      - e-claim-network
  
  document-service:
    build: 
      context: ./services
      dockerfile: DocumentService/Dockerfile
    environment:
      ASPNETCORE_ENVIRONMENT: "Development"
      MongoDbSettings__ConnectionString: "mongodb://root:password@mongodb:27017"
      MongoDbSettings__DatabaseName: "DocumentDB"
      RabbitMQ__HostName: "rabbitmq"    # RabbitMQ host configuration
    ports:
      - "5020:8080"
    depends_on:      
      mongodb:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    networks:
      - e-claim-network
  
  document-processor:
    image: document-processor:latest
    build:
      context: ./openfaas/document-processor
    environment:      
      RabbitMQ__HostName: "rabbitmq"
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - e-claim-network

networks:
  e-claim-network:
    driver: bridge

volumes:
  postgres-data:
  keycloak-data:     # Declare the keycloak-data volume  
  es-data:
  mongo-data: